knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
my.product.min <- function(x)
{
min <- min(x)
return(x*min)
}
my.product.min <- function(x)
{
min <- min(x)
return(x * min)
}
x1 <- rnorm(10)  # generate 10 random numbers stored in a vector "x1"
my.product.min(x1) # apply my.product.min function to x1
x2 <- rnorm(14)  # generate 14 random numbers and apply function
my.product.min(x2)
sum.squares.scalar1 <- function(y.vec,a)
{
return( sum((y.vec-a)^2) )
}
y1 <- rnorm(100) # generate 100 random numbers
a1 <- 1.5
sum.squares.scalar1(y1,a1)
sum.squares.scalar2 <- function(y.vec,a)
{
#
if( length(a)>1){stop("Error: a should be a scalar.")}
return( sum((y.vec-a)^2) )
}
sum.squares.scalar2 <- function(y.vec,a)
{
#
if( length(a)>1){stop("Error: a should be a scalar.")}
return( sum((y.vec-a)^2) )
}
y1 <- rnorm(10) # vector of 10 random numbers
a2 <- c(10,11,-2) # vector of 3 numbers
a3 <- 5 # scalar
sum.squares.scalar2(y1,a2)
y1 <- rnorm(10) # vector of 10 random numbers
a2 <- c(10,11,-2) # vector of 3 numbers
a3 <- 5 # scalar
#sum.squares.scalar2(y1,a2)
sum.squares.scalar2(y1,a3)
data <- read.csv("airbnb_asheville.csv")
head(data)
data <- read.csv("airbnb_asheville.csv")
# Mean of 'price'
mean(data$price)
data <- read.csv("airbnb_asheville.csv")
# Mean of 'price'
mean(data$price)
# Median of 'price'
median(data$price)
# Standard Deviation of 'price'
sd(data$price)
# Range of 'price'
range(data$price)
data <- read.csv("airbnb_asheville.csv")
# Mean of 'price'
mean(data$price)
# Median of 'price'
median(data$price)
# Standard Deviation of 'price'
sd(data$price)
# Range of 'price'
range(data$price)
room_type <- table(data$room_type)
room_type <- table(data$room_type)
room_type
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
setwd("/Users/dekunke/Library/CloudStorage/Dropbox/DSA 8010/Labs/Data")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# setwd("/Users/dekunke/Library/CloudStorage/Dropbox/DSA 8010/Labs/Data")
listings <- read.csv("airbnb_asheville.csv")
listings$room_type <- as.factor(listings$room_type)
mean(listings$price)
median(listings$price)
sd(listings$price)
# another approach
listings |> summarise(mean_price = mean(price), median_price = median(price), std_price = sd(price))
room.type.table <- table(listings$room_type)
room.type.table
prop.table(room.type.table)
room.type.counts <- listings |> group_by(room_type) |> summarize(group_n=n())
room.type.counts$group_n/nrow(listings)
# get unique values of categorical variable
unique(listings$room_type)
# count up number of listings of each type
no.private <- length(which(listings$room_type=='Private room'))
no.entire <- length(which(listings$room_type=='Entire home/apt'))
no.shared <- length(which(listings$room_type=='Shared room'))
no.hotel <- length(which(listings$room_type=='Hotel room'))
# total number of listings
n <- nrow(listings)
# calculate proportions using the counts
no.private/n
no.entire/n
no.shared/n
no.hotel/n
entirehome.subset <- subset(listings, room_type=='Entire home/apt')
mean(entirehome.subset$price)
median(entirehome.subset$price)
sd(entirehome.subset$price)
private.subset <- subset(listings, room_type=='Private room')
mean(private.subset$price)
median(private.subset$price)
sd(private.subset$price)
listings |> group_by(room_type) |> summarise(mean=mean(price), median=median(price),sd=sd(price))
sum(listings$number_of_reviews>=50)/nrow(listings)
par(mfrow=c(1,2))
hist(listings$number_of_reviews,main='number of reviews',
xlab='count')
boxplot(listings$number_of_reviews,main='number of reviews',
xlab='count')
g1 <- ggplot(data=listings, aes(x=number_of_reviews)) + geom_histogram(bins=30)
g2 <- ggplot(data=listings, aes(x=number_of_reviews)) + geom_boxplot()
g1
g2
my.sd_sol <- function(x)
{
x.bar <- mean(x)
n <- length(x)
sum.sq.deviations <- sum((x-x.bar)^2)
return(sqrt(sum.sq.deviations/(n-1)))
}
my.sd_sol1 <- function(x)
{
n <- length(x)
return (sqrt(sum((x - mean(x))^2) / (n - 1)))
}
my.sd_sol2 <- function(x)
{
top <- (x - mean(x)) ** 2
bottom <- (length(x) - 1)
y <- sqrt(sum(top/bottom))
return(y)
}
x <- rnorm(20)
sd(x)
my.sd_sol(x)
my.sd_sol1(x)
my.sd_sol2(x)
my.sd2_sol1 <- function(x)
{
vecLen <- length(x)
if (vecLen <=1){
stop("The standard deviation is not defined for a singe number!")}
myFuncMean <- mean(x)
myN <- length(x)-1 # sample number -1
mySubmVec <- (x - myFuncMean) #subtract the mean from each value
mySqrVec <- (mySubmVec^2) #sqr and sum values
my_s <- sqrt(sum(mySqrVec)/myN) #final division and the taking the sqrt
my_s # returns the value
}
my.sd2_sol2 <- function(x)
{
if( length(x)<2){stop("Error: Vector must have a length of at least 2.")}
return( sqrt(sum((x - mean(x))^2) / (length(x) - 1)) )
}
y1 <- 3 # vector with one element -- it shouldn't work
y2 <- rnorm(3) # vector with three elements - should work!
# apply your function to y1 and y2 in this space.
#my.sd2(y1)
my.sd2_sol1(y2)
my.sd2_sol2(y2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
full_house <- subset(data, room_type == "Entire home/apt")
full_house
full_house <- subset(data, room_type == "Entire home/apt")
# Mean
mean(full_house$price)
# Median
median(full_house$price)
# Standard Deviation
sd(full_house$price)
# Mean, median, and standard deviation of 'price' of 'Entire home/apt' housing
full_house <- subset(data, room_type == "Entire home/apt")
mean(full_house$price)
median(full_house$price)
sd(full_house$price)
# Mean, median, and standard deviation of 'price' of 'Private room' housing
private_house <- subset(data, room_type == "Private room")
mean(private_house$price)
median(private_house$price)
sd(private_house$price)
head(data)
over_50 <- subset(data, number_of_reviews > 50)
over_50 <- subset(data, number_of_reviews > 50)
over_50
over_50 <- subset(data, number_of_reviews > 50)
nrow(over_50) / nrow(data)
over_50 <- subset(data, number_of_reviews > 50)
proportion <- 100 * nrow(over_50) / nrow(data)
over_50 <- subset(data, number_of_reviews > 50)
proportion <- 100 * nrow(over_50) / nrow(data)
proportion
# Histogram of 'number_of_reviews"
hist(data$number_of_reviews)
# Histogram of 'number_of_reviews"
hist(data$number_of_reviews, main = "Histogram of number of reviews", xlab = "Count")
# Boxplot of 'number_of_reviews'
boxplot(data$number_of_reviews, main = "Boxplot of number of reviews", xlab = "Count")
my.sd <- function(x)
{
n <- lenght(x)
return (sqrt(sum((x - mean(x))^2) / (n - 1)))
}
x <- rnorm(20)
sd(x)
my.sd(x)
my.sd <- function(x)
{
n <- length(x)
return (sqrt(sum((x - mean(x))^2) / (n - 1)))
}
x <- rnorm(20)
sd(x)
my.sd(x)
my.sd2 <- function(x)
{
if (length(x)<2){stop("Error, only one element.")}
return (sqrt(sum((x - mean(x))^2) / (n - 1)))
}
y1 <- 3 # vector with one element -- it shouldn't work
y2 <- rnorm(3) # vector with three elements - should work!
# apply your function to y1 and y2 in this space.
my.sd2(y1)
y1 <- 3 # vector with one element -- it shouldn't work
y2 <- rnorm(3) # vector with three elements - should work!
# apply your function to y1 and y2 in this space.
my.sd2(y1)
y1 <- 3 # vector with one element -- it shouldn't work
y2 <- rnorm(3) # vector with three elements - should work!
# apply your function to y1 and y2 in this space.
#my.sd2(y1)
my.sd2(y2)
y1 <- 3 # vector with one element -- it shouldn't work
y2 <- rnorm(3) # vector with three elements - should work!
# apply your function to y1 and y2 in this space.
my.sd2(y1) # Should give error
y1 <- 3 # vector with one element -- it shouldn't work
y2 <- rnorm(3) # vector with three elements - should work!
# apply your function to y1 and y2 in this space.
my.sd2(y1) # Should give error
y1 <- 3 # vector with one element -- it shouldn't work
y2 <- rnorm(3) # vector with three elements - should work!
# apply your function to y1 and y2 in this space.
# my.sd2(y1) # Should give error
my.sd2(y2)
